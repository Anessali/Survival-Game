''Note:'' You should see two error messages below if you have
{{{<<run UInv.SetUserAlerts(UInv.ERROR_THROW_ERROR + UInv.ERROR_SHOW_PASSAGE_NAME)>>}}}
in the StoryInit passage (by default that line is commented out).  This is done intentionally as an example of how UInv can help you spot and prevent errors in your code.

''Create bag "Test":'' <<if UInv.CreateBag("Test")>>Success.<<else>>$UInvLastErrorMessage<</if>>
''Create bag "Test":'' <<if UInv.CreateBag("Test")>>Success.<<else>>$UInvLastErrorMessage<</if>>
''Add item "belt" to bag "Test":'' <<if UInv.AddItem("Test", "belt")>>Success.<<else>>$UInvLastErrorMessage<</if>>
''Add item "blort" to bag "Test":'' <<if UInv.AddItem("Test", "blort")>>Success.<<else>>$UInvLastErrorMessage<</if>>
''List of items in "Test":'' <<print UInv.DisplayItemList("Test")>>
''Add item "belt" to bag "Test":'' <<if UInv.AddItem("Test", "belt")>>Success.<<else>>$UInvLastErrorMessage<</if>>
''Add item "black belt" as type "belt" to bag "Test":'' <<if UInv.AddItem("Test", "belt", 1, "black belt")>>Success.<<else>>$UInvLastErrorMessage<</if>>
''List of items in "Test":'' <<set _Items = UInv.GetItemsArray("Test")>><<if _Items.length == 0>>(empty)<<else>><<for _i = 0; _i < _Items.length; _i++>>_Items[_i] (<<print UInv.BagHasItem("Test", _Items[_i])>>)<<if _i < _Items.length - 2>>, <<elseif _i < _Items.length - 1>><<if _Items.length > 2>>,<</if>> & <</if>><</for>><</if>>

 -- ''Note:'' Even though "black belt" has the same default //type// as "belt", it will be grouped separately, since it has a different item //name//. --
 
''List of "belt" properties and values in "Test":''<<set _Item = UInv.GetItemObject("Test", "belt")>><<for _Prop, _Val range _Item>><br>- _Prop = _Val<</for>>
''List of "black belt" properties and values in "Test":''<<set _Item = UInv.GetItemObject("Test", "black belt")>><<for _Prop, _Val range _Item>><br>- _Prop = _Val<</for>>

''Note:'' You can see that the "belt" and "black belt" items are nearly identical except for the quantity (because we added a "belt" item twice and a "black belt" item only once) and the "UInvDefaultItemType" property on the "black belt" item.  The reason why the black belt has "UInvDefaultItemType = belt" is because its name ("black belt") is not the same as its item type ("belt").  The "UInvDefaultItemType" property preserves that item type in order to save memory and reduce the size of the save data.

Go to [[passage 2]]


::passage 2

 -- ''Note:'' In the following SetItemPropertyValue examples, "true" means that it modified an existing item property, and "false" means that it created a new item property. --
 
''Set "black belt" "description" property to "It's a black belt.":'' <<print UInv.SetItemPropertyValue("Test", "black belt", "description", "It's a black belt.")>>
''Set "black belt" "magic" property to 1:'' <<print UInv.SetItemPropertyValue("Test", "black belt", "magic", 1)>>
''Set "black belt" "singular" property to "a black belt":'' <<print UInv.SetItemPropertyValue("Test", "black belt", "singular", "a black belt")>>
''Set "black belt" "plural" property to "black belts":'' <<print UInv.SetItemPropertyValue("Test", "black belt", "plural", "black belts")>>
''List of items in "Test":'' <<set _Items = UInv.GetItemsArray("Test")>><<if _Items.length == 0>>(empty)<<else>><<for _i = 0; _i < _Items.length; _i++>>_Items[_i] (<<print UInv.BagHasItem("Test", _Items[_i])>>)<<if _i < _Items.length - 2>>, <<elseif _i < _Items.length - 1>><<if _Items.length > 2>>,<</if>> & <</if>><</for>><</if>>
''List of "belt" properties and values in "Test":''<<set _Item = UInv.GetItemObject("Test", "belt")>><<for _Prop, _Val range _Item>><br>- _Prop = _Val<</for>>

''List of "black belt" properties and values in "Test":''
<<set _Item = UInv.GetItemObject("Test", "black belt")>>
<<for _Prop, _Val range _Item>>
<br>- _Prop = _Val
<</for>>
''Alternate way of showing quantity:'' <<print UInv.GetItemsArray("Test")[0]>> = <<print UInv.GetItemObject("Test", UInv.GetItemsArray("Test")[0]).UInvQuantity>>

Go to [[passage 3]]


::passage 3
''Add "dagger" to bag "Test":'' <<if UInv.AddItem("Test", "dagger")>>Success.<<else>>$UInvLastErrorMessage<</if>>
''List of items in "Test":'' \\
<<set _Items = UInv.GetItemsArray("Test")>>
<<if _Items.length == 0>>
    (empty)
<<else>>
    <<for _i = 0; _i < _Items.length; _i++>>
        _Items[_i] (<<print UInv.BagHasItem("Test", _Items[_i])>>)
        <<if _i < _Items.length - 2>>, 
        <<elseif _i < _Items.length - 1>>
            <<if _Items.length > 2>>,
            <</if>> & 
        <</if>>
    <</for>>
<</if>>
''Show "dagger" type:'' <<print UInv.GetItemObject("Test", "dagger").type>>
''Set "dagger" type to ["item"]:'' <<if UInv.SetItemPropertyValue("Test", "dagger", "type", ["item"])>>Success.<<else>>$UInvLastErrorMessage<</if>><<set _Item = UInv.GetItemObject("Test", "dagger")>><<for _Prop, _Val range _Item>><br>- _Prop = _Val<</for>>
''Set "dagger" type back to ["weapon", "stabbing", "1-handed"]:'' <<if UInv.SetItemPropertyValue("Test", "dagger", "type", ["weapon", "stabbing", "1-handed"])>>Success.<<else>>$UInvLastErrorMessage<</if>><<set _Item = UInv.GetItemObject("Test", "dagger")>><<for _Prop, _Val range _Item>><br>- _Prop = _Val<</for>>
''Create bag "Test2":'' <<if UInv.CreateBag("Test2")>>Success.<<else>>$UInvLastErrorMessage<</if>>
''Copy "dagger" from "Test" to "Test2":'' <<if UInv.CopyItem("Test", "Test2", "dagger")>>Success.<<else>>$UInvLastErrorMessage<</if>><<set _Item = UInv.GetItemObject("Test2", "dagger")>><<for _Prop, _Val range _Item>><br>- _Prop = _Val<</for>>

''Note:'' You should see one error message pop up when you go to the next passage if you have error displaying enabled.  This is done intentionally as an example of how UInv can help you spot and prevent errors in your code.

Go to [[passage 4]]


::passage 4









